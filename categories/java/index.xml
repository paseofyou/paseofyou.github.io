<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>java面试 on paseofyou的博客</title>
        <link>https://paseofyou.github.io/categories/java/</link>
        <description>Recent content in java面试 on paseofyou的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Tue, 02 Jul 2024 11:12:50 +0800</lastBuildDate><atom:link href="https://paseofyou.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Java基础面试题（转载自学精灵）</title>
        <link>https://paseofyou.github.io/p/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E8%BD%AC%E8%BD%BD%E8%87%AA%E5%AD%A6%E7%B2%BE%E7%81%B5/</link>
        <pubDate>Tue, 02 Jul 2024 11:12:50 +0800</pubDate>
        
        <guid>https://paseofyou.github.io/p/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E8%BD%AC%E8%BD%BD%E8%87%AA%E5%AD%A6%E7%B2%BE%E7%81%B5/</guid>
        <description>&lt;h2 id=&#34;java基础&#34;&gt;Java基础
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;基础&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java中==和equals有什么区别？（难度：★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/2224&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java中==和equals有什么区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;String, StringBuffer, StringBuilder区别（难度：★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/62&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-String, StringBuffer, StringBuilder的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;String对象数目（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/196&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java–创建对象的个数及其原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;intern方法的作用（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/211&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java之String系列-intern方法的作用及原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何修改String对象的数据？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/266&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-String不可变的含义、原因、好处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;static的5种用法（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/277&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-static-用法/使用位置/实例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么静态方法不能调用非静态方法和变量？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;与类加载顺序有关，加载静态方法时，非静态的未初始化。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/406&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM原理-类加载过程(有实例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;异常有哪两大类？Throwable和Exception是什么关系？常见的RuntimeException有哪些？常见的Error有哪些？（难度：★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/290&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-异常/Exception-类型/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;catch里return了，finally是否执行？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/297&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-异常/Exception-try/catch/finally的return顺序&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字节流与字符流区别？（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/299&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-IO-字节流与字符流的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BIO, NIO, AIO 区别？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/301&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-BIO、NIO、AIO-区别/使用/实例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JDK8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JDK8新特性（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;接口允许default和static；lambda；stream；时间新API（LocalDateTime等）CompletableFuture；等&lt;/p&gt;
&lt;p&gt;JDK8接口的default和static（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/303&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-接口(JDK8新特性等)-详解/实例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JDK8 Stream API 流操作包括哪些部分？项目中怎么用的Stream？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/306&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-Stream(流)-使用/实例/流操作&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;项目中对泛型的使用（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/349&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-泛型的应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接口与抽象类的区别？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/351&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-接口与抽象类的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反射&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java反射：forName和classLoader的区别（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/355&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-通过反射实例化对象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;反射机制中可以获取private成员的值吗？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以。法1：通过Field类提供的set()和get()方法 法2：通过setter和getter&lt;/li&gt;
&lt;li&gt;见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/2673#%e4%bf%ae%e6%94%b9%e5%b1%9e%e6%80%a7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java反射系列-应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拆箱与装箱（难度：★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/358&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-自动拆箱/装箱/实例化顺序/缓存&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;集合&#34;&gt;集合
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;List与Set的区别（难度：★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/361&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ArrayList与LinkedList以及List与数组、Set的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ArrayList与LinkedList异同点？（难度：★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/361&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ArrayList与LinkedList以及List与数组、Set的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;List与数组的区别？（难度：★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/361&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ArrayList与LinkedList以及List与数组、Set的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ArrayList是否线程安全？如何线程安全地操作ArrayList？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/363&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-ArrayList保证线程安全的方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ArrayList扩容机制（难度：★★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/368&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-ArrayList扩容的原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;List.subList的坑？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/370&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java的List之坑-subList与原始List相互影响&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;List如何安全删除（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/372&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-安全删除的方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;List如何去重？（难度：★ 频率：★★）&lt;/p&gt;
&lt;p&gt;stream，或：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/374&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-去重的方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;List如何实现排序（难度：★ 频率：★★）&lt;/p&gt;
&lt;p&gt;stream，或：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/376&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-排序的方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么引入迭代器？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/378&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java类集-为什么引入迭代器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HashMap、TreeMap、LinkedHashMap的区别？（难度：★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/380&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HashMap,TreeMap,LinkedHashMap的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JDK8的HashMap的改变？（难度：★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/382&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-JDK7与JDK8的HashMap的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HashMap数据结构、哈希冲突解决方法（难度：★★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/387&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-HashMap的底层原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/392&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hash冲突的4种解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HashMap扩容的原理（难度：★★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/394&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-HashMap扩容的原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HashMap为什么线程不安全？如何线程安全地操作？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/396&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-HashMap保证线程安全的方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap的原理？JDK8有什么改变？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/384&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-ConcurrentHashMap的原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HashMap和HashSet的区别及其实现原理？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HashMap：将key.hashCode()作为hash值存放，将value直接作为value。&lt;/li&gt;
&lt;li&gt;HashSet：调用HashMap的put方法；将key.hashCode()作为hash值存放，将HashSet类的final变量PRESENT作为value。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HashMap如果使用对象最为key，要注意什么？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写hashCode和equals。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对象比较为什么重写hashCode和equals？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写equals方法时需要重写hashCode方法，主要是针对Map、Set等集合类型的使用；
&lt;ul&gt;
&lt;li&gt;a: Map、Set等集合类型存放的对象必须是唯一的；&lt;/li&gt;
&lt;li&gt;b: 集合类判断两个对象是否相等，是先判断HashCode是否相等，如果HashCode返回TRUE，还要再判断equals返回值是否ture，只有两者都返回ture，才认为该两个对象是相等的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jvm&#34;&gt;JVM
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;运行时数据区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行时数据区是怎样的？线程安全（即线程私有）的有哪些？（难度：★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/403&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM原理-运行时数据区域&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对象实例、类信息、常量、静态变量分别在运行时数据区的哪个位置？（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/403&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM原理-运行时数据区域&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类加载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java类加载流程？初始化流程？（难度：★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/406&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM原理-类加载过程(有实例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JVM双亲委派模型（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/409&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM原理-双亲委派模型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存泄露&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java内存泄露什么时候会发生？（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1337&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-内存泄露的原因及解决方案(大全)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么内部类持有外部类可能内存泄露？如何解决？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/412&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-内部类持有外部类导致内存泄露的原因和解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么ThreadLocal会导致内存泄露？如何解决？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/439&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-ThreadLocal导致内存泄露的原因和解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;垃圾回收&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JDK8垃圾回收器的流程？（难度：★★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/441&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM-内存模型/垃圾回收流程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引用类型及其含义（难度：★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/446&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java引用类型(强引用、软引用、弱引用、虚引用)的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;finalize方法做什么用的？（难度：★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垃圾回收时会调用此方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以作为GC.Roots的对象有哪些？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/453&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM-可作为GC Roots的对象&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调用System.gc()会立刻垃圾回收吗？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/456&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM-Java垃圾回收的原理与触发时机&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minor GC和Full GC的触发时机。（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/456&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM-Java垃圾回收的原理与触发时机&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;频繁Full GC如何排查（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java线上问题排查-系统问题排查的方法/步骤&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JDK默认的垃圾回收器是什么？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/462&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM-垃圾回收器的详解/对比&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CMS和G1区别（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/465&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM-CMS和G1垃圾回收器的区别和执行流程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CMS与其他老年代垃圾回收器的区别？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/462&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM-垃圾回收器的详解/对比&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JVM调优&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JVM通常设置哪些参数来调优？（难度：★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/475&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM调优系列-常用的设置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么分配堆外内存（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/478&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java堆外内存–使用/作用&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;多线程&#34;&gt;多线程
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;综合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;项目中哪些地方用到了多线程？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时任务。  比如：定时处理数据进行统计等&lt;/li&gt;
&lt;li&gt;异步处理。  比如：发邮件， 记录日志， 发短信等。比如注册成功后发激活邮件&lt;/li&gt;
&lt;li&gt;批量处理，缩短响应时间。比如：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/481&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringBoot-多线程处理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程的安全性问题体现在哪些方面？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/503&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java多线程-内存模型(JMM)-详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;死锁产生的条件？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/506&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java多线程-基础知识&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;i++是否线程安全？（难度：★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不是线程安全的。要线程安全可以用java.util.concurrent.atomic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JMM内存结构（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/503&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java多线程-内存模型(JMM)-详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;synchronized&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;synchronized用于静态方法与普通方法有区别吗？（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/508&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-synchronized的使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;synchronized锁的升级是怎样的？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/510&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-synchronized之锁的升级&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SimpleDateFormat线程安全吗？怎么保证线程安全？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/353&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SimpleDateFormat-线程安全的操作方法(有实例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程池&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;线程池缺点（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/514&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-为什么使用线程池？优缺点是什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;线程池有哪些参数？（难度：★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/488&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java线程池-核心参数/大小设置/使用示例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPU密集与IO密集的场景如何设置线程池参数？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/488&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java线程池-核心参数/大小设置/使用示例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;线程池有哪几种？它们分别对应什么队列？（难度：★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/516&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java线程池-种类(Executors的用法)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/523&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-阻塞队列(BlockingQueue)的用法(有实例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么时候触发最大线程条件？（难度：★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/531&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-线程池的原理(执行流程/状态转换)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;线程池拒绝策略有哪些？默认是哪个？（难度：★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/490&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java线程池-饱和策略(拒绝策略)的使用(有实例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;线程池里的异常时如何处理的？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/537&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-线程池全局异常处理的方法(有实例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JUC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ReentrantLock显著缺点？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/539&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-ReentrantLock的用法和原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CAS和AQS了解吗？原理是什么（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/544&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-CAS的原理和优缺点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/546&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-AQS的原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;synchronized与ReentrantLock区别？（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/549&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;synchronized与volatile、ReentrantLock的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有哪些原子类？用过哪个？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/551&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-原子类(atomic)的用法(有实例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目里用了哪些锁？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单体项目里用到了ReentrantLock、synchronized；&lt;/li&gt;
&lt;li&gt;单例模式里用到了synchronized&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JDK8新增的异步编程了解吗？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/554&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java异步-CompletableFuture-实例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;多线程顺序交替执行的方法（有三个线程A,B,C，依次打印出A,B,C）（难度：★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方案1：
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/484&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-使用阻塞队列实现顺序消费-方法/实例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方案2：模拟阻塞队列
&lt;ul&gt;
&lt;li&gt;使用Object的wait(), notify()，使用一个互斥锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql&#34;&gt;MySQL
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;综合问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MyISAM与InnoDB区别（难度：★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/556&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL存储引擎-MyISAM和InnoDB的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sql注入怎么解决？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/558&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库-防止SQL注入的方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三大范式（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/560&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库-三大范式-介绍/使用/实例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;怎么样幂等（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/569&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库-幂等-方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一条SQL查询语句的执行流程（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/573&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL一条SQL查询语句的执行流程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么不要用外键？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/586&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库-外键-用法/缺点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;批量往数据库导入1000万条数据方法？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库优化方式（难度：★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立索引、字段冗余（减少联表查询）、使用缓存、读写分离、分库分表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怎么调试存储过程（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;使用工具：dbForge Studio for MySQL&lt;/p&gt;
&lt;p&gt;MySQL的三种驱动类型 难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/590&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-时区/连接器/驱动类型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;隔离级别是怎样的？脏读、幻读是什么意思？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/592&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL隔离级别-未提交读，提交读，可重复读，序列化-详解(有示例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隔离级别如何选用？（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/592&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL隔离级别-未提交读，提交读，可重复读，序列化-详解(有示例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ACID（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/598&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库-事务的ACID-介绍/详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隔离级别是如何实现的？（MVCC）（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/600&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL隔离级别的实现方式-MVCC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;快照读与当前读 是怎样的？（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/600&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL隔离级别的实现方式-MVCC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;索引的种类（难度：★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/606&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL索引的类型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据库使用索引的缺点？（难度：★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/608&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-索引的优点/缺点/创建索引的原则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建索引的原则（难度：★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/608&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-索引的优点/缺点/创建索引的原则&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;索引什么时候会失效（难度：★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/610&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-索引失效的原因/解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建了A, B, C联合索引，使用B,C能否索引（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/611&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL联合索引-使用/原理/优化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LIKE什么时候走索引，什么时候不走索引？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/614&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL索引的优化-LIKE模糊查询&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ORDER BY是否走索引？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/617&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL索引的优化-ORDER BY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;聚集索引是什么？什么是回表？（难度：★★★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/620&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-聚集索引/辅助索引/回表查询/覆盖索引(原理及优化)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大表分页的优化方法？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/631&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-大数据量的分页优化方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;索引原理；为什么采用B+树？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/634&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL原理-索引的原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;共享锁与独占锁的区别？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/639#%e5%85%b1%e4%ba%ab%e9%94%81%e4%b8%8e%e7%8b%ac%e5%8d%a0%e9%94%81&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-行级锁与表级锁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么时候会死锁？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/641&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-死锁的原因及解决方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分库分表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么时候考虑分库分表？分库分表要考虑什么问题？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/643&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库-分库分表-方案/切分方式/注意的问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原来没分库分表，后期如何分库分表？（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/645&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库-单表转分库分表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分库分表的中间件（难度：★★ 频率：★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sharding-JDBC、Mycat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;水平分表，有哪些规则？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/649&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库-分库分表-垂直分表与水平分表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何维护全局的id（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/671&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式-生成数据库全局唯一ID的方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语句类笔试题（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/657&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-常见业务/笔试题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OR与IN的效率？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/661&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-SQL语句优化-大全&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内联结，全（外）联结，左联结，右联结，的含义？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/663&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL-内联结/全联结/左联结/右联结的区别&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;redis&#34;&gt;Redis
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;基本问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis数据类型及其使用场景（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/693&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-数据类型及其使用场景&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis的数据类型对应的底层结构是怎样的？（难度：★★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/700&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis原理-数据类型的底层结构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis为什么很快？（难度：★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/702&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis原理-为什么性能高，速度快？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis是单线程为什么速度依然快？（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/702&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis原理-为什么性能高，速度快？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis持久化AOF，RDB区别（难度：★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/705&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis持久化-AOF和RDB的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;持久化：长久下来AOF文件会很大怎么办？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;使用重写机制。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/707&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-重写机制（减小AOF文件大小）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis有哪些原子命令？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis所有单个命令都是原子性的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;穿透、无底洞、雪崩、击穿 解决方案？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/710&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-缓存穿透-含义/原因/解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/734&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-无底洞-含义/原因/解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/745&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-缓存雪崩-含义/原因/解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/749&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-缓存击穿-含义/原因/解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis的发布订阅机制及其使用场景（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/751&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-发布订阅-原理/使用场景&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内存回收机制是怎样的？（或者说：淘汰策略）（难度：★★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/756&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis–内存回收原理（淘汰策略）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给一个key怎么知道是用的哪种数据类型？（难度：★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用type命令。例如：type key1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么使用Redis，不用Memcache和MongoDB？（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/760&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis，Memcache，MongoDB三者的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis与数据库如何同步？各个方式的缺点是什么？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/762&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-保证缓存与数据库的一致性-解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis很慢，如何排查及解决？（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/767&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-变慢原因及排查方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;多线程操作同一个Key如何保证一致性？（微服务部署多个实例时如何保证一致性？）（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/779&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-多线程竞争同一key-解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;秒杀的时候怎么使用Redis？（难度：★★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/782&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-秒杀的解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;布隆过滤器原理？什么时候会误判？（难度：★★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/716&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis-布隆过滤器-使用/原理/实例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用Redis如何实现延迟队列？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/784&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis高级-延迟队列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分布式锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redis做分布式锁如何处理超时时间？比如：超时时间是5秒，但要执行20秒，相当于没锁住；超时时间是20秒，但只需执行5秒（浪费）（难度：★★★★ 频率：★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置中等长度的时间，线程执行完删除这个值；另起线程，定期去刷新这个值。Redisson的分布式锁就是这个方案，见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/786&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redisson-分布式锁的原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis实现分布式锁，集群环境如何处理主节点宕机这种情况？（难度：★★★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用RedLock红锁算法：若过半的Redis节点能够加锁成功则表示获取锁成功，类似于zk实现分布式锁方式。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1338&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redisson-红锁(Redlock)-使用/原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多节点有哪些部署方式？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主从、哨兵、集群（Cluster）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集群不支持事务，如何解决？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/788&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis集群-使用/注意事项&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主从集群中主节点死了以后，是否还能使用？如何解决？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用哨兵部署，自动故障转移。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读写分离时读写分别在哪个节点（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在主节点上写，在从节点上读。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;集群（Cluster）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;集群（Cluster）的数据是怎样分布的？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/2684&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis集群-数据分布&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;集群（Cluster）如何进行节点通信？（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/823&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis集群-节点通信的过程(原理)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;集群（Cluster）如何进行扩展（伸缩）？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/790&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis集群-伸缩的过程(原理)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;集群（Cluster）如何进行故障转移？（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/829&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Redis集群-故障转移的过程(原理)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;设计模式&#34;&gt;设计模式
&lt;/h2&gt;&lt;p&gt;项目里用到了哪些设计模式，怎么用的？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/856&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java设计模式-在项目中的应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设计模式的原则（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个我老是记不住，我用这个口诀：单开里依接合迪。对应每个原则的第一个字。&lt;/li&gt;
&lt;li&gt;见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1339&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java设计模式-原则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计模式的类别（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/863&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java设计模式-分类及功能&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;单例模式的写法？（难度：★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/278&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java设计模式-单例模式(6种写法)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手写双重检验单例（为什么用volatile，为什么两次if判断）（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/278&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java设计模式-单例模式(6种写法)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静态代理与动态代理区别？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/865&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-代理模式(静态代理与动态代理)的使用&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;框架&#34;&gt;框架
&lt;/h2&gt;&lt;h3 id=&#34;spring&#34;&gt;Spring
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;IOC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring循环依赖解决方法及原理（难度：★★★★ 频率：★★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/877&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring-循环依赖的解决方案-实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/887&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring循环依赖的原理(三)-原理概述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring的循环依赖用的是三级缓存，为什么不是两级？（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/888&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring循环依赖的原理(四)-为什么用三级缓存，而不是二级&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FactoryBean和BeanFactory区别（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/957&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring-BeanFactory-使用/原理/详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/955&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring-FactoryBean-使用/原理/详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BeanFactory和ApplicationContext区别？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/959&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring-ApplicationContext-使用/教程/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;bean的生命周期是怎样的（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/925&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring-Bean生命周期-流程/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring几种scope区别（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/962&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring-Bean的作用域(scope)-使用/详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring容器的生命周期是怎样的？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/963&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring容器生命周期-Lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AOP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AOP有哪几种通知，如果方法执行报异常，哪个通知不会执行？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前置，后置，环绕，返回，异常。若报异常，返回不会执行。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/966&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpringAOP的使用场景是什么？用AOP开发过什么功能（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/971&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring之AOP系列-使用场景/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AOP原理？（难度：★★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/910&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring之AOP的原理(一)-概述&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring默认数据里隔离级别是什么？项目里用的哪个？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;默认采用数据库的隔离级别。项目里就是用的默认的。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/592&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL隔离级别-未提交读，提交读，可重复读，序列化-详解(有示例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring事务什么时候会失效？如何解决？（难度：★★★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/974&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring事务失效-原因/解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring事务传播机制？（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/977&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring事务传播机制详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SpringBoot如何热更新配置？（更新配置后无需重启服务）（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;有四种方案。详见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/2377#%e5%8a%a8%e6%80%81%e6%9b%b4%e6%96%b0%e9%85%8d%e7%bd%ae%e7%9a%84%e6%96%b9%e6%b3%95&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SpringBoot自动配置原理？（难度：★★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/928&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringBoot原理-自动配置&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;springmvc&#34;&gt;&lt;strong&gt;SpringMVC&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;SpringMVC流程（难度：★★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/982&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringMVC的请求流程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;servlet的过滤器、拦截器、AOP的执行顺序 （难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/988&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringBoot-过滤器/拦截器/AOP-用法&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;springboot&#34;&gt;SpringBoot
&lt;/h3&gt;&lt;p&gt;SpringBoot的启动流程？（难度：★★★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/902&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringBoot原理-启动流程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SpringBoot的动态代理默认用的哪个（cglib还是JDK）？（难度：★★★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;SpringBoot 1.5.x：默认使用JDK代理；SpringBoot 2.x：默认使用CGLIB代理。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/971&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring之AOP系列-使用场景/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;怎么自己写SpringBootStarter（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/994&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringBoot-自定义Spring Boot Starter&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mybatis&#34;&gt;MyBatis
&lt;/h3&gt;&lt;p&gt;MyBatis的#与$有什么区别？（难度：★★ 频率：★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/998&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MyBatis-#与$的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MyBatis的原理？（Mapper是个接口，它的实现类在哪？）（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/956&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring-MyBatis源码对FactoryBean的应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么MyBatis与Spring整合二级缓存会失效 ？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/999&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MyBatis原理-缓存机制&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;中间件&#34;&gt;中间件
&lt;/h2&gt;&lt;h3 id=&#34;mq&#34;&gt;MQ
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;综合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ，RocketMQ和Kafka区别（难度：★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1004&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RabbitMQ，RocketMQ，Kafka的区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ有哪些交换器？RabbitMQ的交换器与队列的关系？（难度：★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1005&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RabbitMQ的交换器类型与队列模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ的消息异常（丢失、重复、顺序、堆积）如何处理？（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1018&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RabbitMQ消息丢失的原因与解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1030&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RabbitMQ消息重复的原因与解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1031&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RabbitMQ保证消息顺序的方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1034&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RabbitMQ消息堆积的解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RabbitMQ消息是否会过期？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认不会过期。可以设置过期时间。&lt;/li&gt;
&lt;li&gt;详见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1035&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RabbitMQ消息的过期时间(TTL)-使用/原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RabbitMQ的消息什么时候会放到死信队列？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1036&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RabbitMQ死信队列-使用/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ的延迟队列是怎样的？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1039&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RabbitMQ延迟队列-使用/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RabbitMQ的集群有哪几种部署方式？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多机多节点，单机多节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kafka&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么Kafka性能很高（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1042&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kafka为什么吞吐量大、速度快？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kafka的消息异常（丢失、重复）如何处理？（难度：★★★ 频率：★★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1050&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kafka消息丢失-原因/解决方案/零丢失的配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1051&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kafka消息重复-原因/解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kafka不支持延迟队列，如果用到延迟队列，该如何实现？（难度：★★★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1052&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kafka延迟队列的实现方式&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;shiro&#34;&gt;Shiro
&lt;/h3&gt;&lt;p&gt;Shiro怎么根据url对应权限，流程是什么？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1123&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Shiro整合jwt-通过url控制权限&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;session存放在哪里？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;一般放在Redis。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1073&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Shiro整合shiro-redis&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;分布式&#34;&gt;分布式
&lt;/h2&gt;&lt;h3 id=&#34;综合&#34;&gt;综合
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;分布式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CAP理论是什么？Zookeeper和Eureka分别放弃了什么？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1141&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式-CAP定理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1145&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;注册中心-Eureka、Zookeeper、Nacos、Consul的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分布式锁实现方式（难度：★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1147&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式锁的实现方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2PC、3PC、TCC的区别及使用场景？（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1169&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式事务-理论&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分布式session共享解决方案（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1189&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式Session的实现方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么微服务一定要有网关？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1191&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;微服务为什么要有网关&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置中心&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何把微服务的公共配置给拿出来？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用spring.profiles.include，将公共的配置包含进去。&lt;/li&gt;
&lt;li&gt;使用Nacos，Nacos支持公共配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Nacos&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nacos如何续期？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个地方我没看，回答的Eureka的： 见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1146&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Cloud Eureka原理-续期/自我保护&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nacos支持AP还是CP？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两者都支持，选一种即可。（默认是AP）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Zookeeper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Zookeeper注册中心挂了，服务还能否调用？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以，因为客户端还有缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ZK分布式锁，leader节点宕机了，会发生什么？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进行选举（过半选举）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;RPC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RPC框架有哪些？SpringCloud是否是RPC框架？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dubbo（阿里的）、gRPC（谷歌的），RMI（JAVA自带）、Thrift（Apache的）&lt;/li&gt;
&lt;li&gt;SpringCloud不是rpc框架，它是分布式一整套解决方案，它的feign组件是rpc框架。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpringCloud与Dubbo的区别？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1193&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dubbo与SpringCloud区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP与RPC方式的区别？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1194&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式-RPC&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;springcloud&#34;&gt;SpringCloud
&lt;/h3&gt;&lt;p&gt;主要是：服务注册、负载均衡、限流、降级、熔断。首先要看其原理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务注册（Eureka）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eureka都挂了，服务还能否调用？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以，因为客户端还有缓存。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1197&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Eureka服务端挂了，为什么微服务还能调通？(原理分析)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微服务关闭了，但请求还会进来，如何解决？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1199&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Cloud Eureka-关闭微服务后请求还会进来&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何续期？如何自我保护？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1146&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Cloud Eureka原理-续期/自我保护&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;熔断（Hystrix）（难度：★★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1205&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Cloud-hystrix熔断的原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;负载均衡（Ribbon）（难度：★★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1206&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Cloud Ribbon-负载均衡的原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SpringCloud限流用哪些组件？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sentinal、hystrix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;配置中心&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;配置中心的配置修改后，服务不重启可以获得最新配置吗？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以的。有四种方案，见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/2377&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;降级&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;elk&#34;&gt;&lt;strong&gt;ELK&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;正排索引与倒排索引的区别？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1209&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ES-正排索引与倒排索引&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ES如何与数据库（如MySQL）同步数据？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1212&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ES-与MySQL同步&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ES集群的健康状态，绿色、黄色、红色分别什么含义？（难度：★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1213&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ES-排查集群健康状态是Red、Yellow的问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ES写入数据的流程（难度：★★★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1230&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ES-写入数据的流程(原理)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ES查询数据的流程（难度：★★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1234&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ES-查询数据的流程(原理)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;综合-1&#34;&gt;综合
&lt;/h2&gt;&lt;p&gt;有没有遇到过什么比较复杂的问题，如何排查的？（难度：★★★★ 频率：★★★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1235&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java后端接口响应慢的排查方法及解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阅读过哪些源码？（难度：★★★★ 频率：★★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring循环依赖的原理。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/887&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;此文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MyBatis的原理。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/956&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;此文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hystrix的原理。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1205&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;此文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;feign负载均衡的原理。见：&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1206&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;此文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OOM如何排查？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用jprofiler，查看OOM时的堆输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java进程消失，如何排查？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1238&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java进程突然消失的原因与排查方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个微服务起了多个实例，怎么让定时任务只在一个实例上执行？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用定时任务中间件。常用的有：XXL-JOB、PowerJob、quartz&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何处理SpringMVC中的异常？ （难度：★★ 频率：★★★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1560&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;全局异常处理&lt;/a&gt;：@ControllerAdvice + @ExceptionHandler。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从用户请求到数据返回的整个流程（难度：★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1246&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;用户请求到出现页面流程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IaaS，PaaS和SaaS是什么？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1250&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IaaS,Paas,SaaS,DaaS-区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网站常见的安全漏洞有哪些？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1253&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;网站安全漏洞-大全&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;oauth2是干什么用的，流程是怎样的？（难度：★★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1259&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OAuth2-流程/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何不停机更新服务？（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1200&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpringBoot项目-如何不停服更新应用？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;限流算法有哪些？（难度：★★★★★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1267&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;常见的限流算法的原理以及优缺点&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;杂项&#34;&gt;杂项
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;HTTP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTPS的详细流程（难度：★★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1273&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTPS-流程/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP消息结构（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1277&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP-报文结构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP状态码及其含义（难度：★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;简记：正完重客服。（1xx：&lt;strong&gt;正&lt;/strong&gt;在处理请求；2xx：请求处理&lt;strong&gt;完&lt;/strong&gt;毕（成功）；3xx：&lt;strong&gt;重&lt;/strong&gt;定向（需要附加操作）；4xx：&lt;strong&gt;客&lt;/strong&gt;户端错误（导致服务器无法处理请求）， 5xx：&lt;strong&gt;服&lt;/strong&gt;务器错误（服务器处理请求出错））。详见：&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/http/http-status-codes.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;此文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WebCocket，HTTP，Socket区别与联系？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1281&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Http，Socket，Websocket-区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP1.0和HTTP2.0的区别？（难度：★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1283&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HTTP1.1与HTTP2.0区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux的5种IO模型（难度：★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1284&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux五种IO模型-原理/区别/详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据结构与算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常见排序算法的复杂度及稳定性（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1291&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;排序算法-Java实例/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;常见查找算法的复杂度及稳定性（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1311&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;查找算法-Java实例/原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络的5层协议的体系结构（难度：★ 频率：★★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1313&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;计算机网络-体系结构(五层模型/七层模型)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TCP握手与挥手流程？为什么要三次？四次？（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1315&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP-三次握手和四次挥手&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TCP如何保证可靠传输？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1318&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP协议如何保证可靠传输&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;服务器怎么主动向客户端主动推送？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端去轮询（每秒查询一次）；WebSocket；TCP长连接；UDP内网穿透&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DNS劫持是怎样的？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;攻击DNS服务器或者客户端设备，修改域名对应的IP，导致通过域名访问到假IP，从而破坏原有服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux无法通过curl获得服务器主页数据如何排查？（难度：★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关防火墙、看host文件里边是否ip和域名绑定了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个同网段Linux服务器在不安装客户端情况下如何传递文件？（难度：★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scp命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Linux命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看文本文件头部n行。（难度：★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;head -n 200 filename //200可替换为任一数字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看文本文件末尾n行。（难度：★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tail -n 200 filename //200可替换为任一数字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看文本文件行数。（难度：★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wc -l filename&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Netty&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Netty 是如何解决 TCP的拆包/粘包问题的？（难度：★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1327&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Netty-原理-TCP-粘包与拆包&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编程题（难度：★★★ 频率：★★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1331&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java笔试题编程题大全(有详细答案)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大数据量如何统计重复出现的次数？（难度：★★★★★ 频率：★）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://way2j.com/a/1332&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;大数据处理方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;怎么实时统计订单？（难度：★★★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Storm框架。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要统计10分钟内订单的亏损，你会怎么设计？（难度：★★★★★ 频率：★）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Storm的窗口模式&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>算法资源（仅供自学）</title>
        <link>https://paseofyou.github.io/p/%E7%AE%97%E6%B3%95%E8%B5%84%E6%BA%90%E4%BB%85%E4%BE%9B%E8%87%AA%E5%AD%A6/</link>
        <pubDate>Mon, 01 Jan 2024 00:00:01 +0800</pubDate>
        
        <guid>https://paseofyou.github.io/p/%E7%AE%97%E6%B3%95%E8%B5%84%E6%BA%90%E4%BB%85%E4%BE%9B%E8%87%AA%E5%AD%A6/</guid>
        <description>&lt;p&gt;本文全部转载自labuladong&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Part1：打卡准备工作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/intro/challenge-process/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day01. 走一遍打卡流程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/abstraction-of-algorithm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day02. 学习算法和刷题的框架思维&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Part2：数组链表必会技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/linked-list-skills-summary/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day03. 链表双指针解题技巧汇总&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/array-two-pointers-summary/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day04. 数组双指针解题技巧汇总&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/data-structure/prefix-sum/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day05. 前缀和数组技巧&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/data-structure/diff-array/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day06. 差分数组技巧&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/practice-in-action/2d-array-traversal-summary/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day07. 二维数组花式遍历技巧&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/binary-search-framework/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day08. 二分搜索技巧&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/sliding-window-framework/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day09. 滑动窗口技巧&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Part3：通过二叉树学习递归思维&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/binary-tree-summary/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day10. 二叉树中的递归思维（纲领篇）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/data-structure/binary-tree-part1/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day11. 二叉树解题（思路篇）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/data-structure/bst-part2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day12. 二叉搜索树解题（基操篇）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Part4：暴力穷举算法之回溯算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/backtrack-framework/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day13. 回溯算法核心原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day14. 回溯算法解决排列组合和子集问题&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/practice-in-action/two-views-of-backtrack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day15. 回溯算法穷举的两种视角&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Part5：暴力穷举算法之动态规划&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/dynamic-programming-framework/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day16. 动态规划核心原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/dynamic-programming/longest-increasing-subsequence/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day17. 动态规划设计方法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/dynamic-programming/faq-summary/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day18. 动态规划答疑篇&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/dynamic-programming/two-views-of-dp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day19. 动态规划问题的两种穷举视角&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Part6：暴力穷举算法之BFS 算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/bfs-framework/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day20. BFS 算法基础&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/practice-in-action/sliding-puzzle/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day21. BFS 算法秒杀各种益智游戏&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Part7：图论算法必会技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/data-structure/graph-traverse/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day22. 图论基础及遍历算法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/data-structure/topological-sort/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day23. 环检测及拓扑排序算法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/data-structure/union-find/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day24. 并查集（Union-Find）算法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/data-structure/kruskal/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day25. Kruskal 最小生成树算法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Part8：数学算法必会技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/frequency-interview/one-line-solutions/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day26. 一行代码就能解决的算法题&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/frequency-interview/print-prime-number/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day27. 如何高效寻找素数&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/frequency-interview/random-algorithm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day28. 谈谈游戏中的随机算法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Part9：打卡挑战总结 &amp;amp; 展望&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/essential-technique/algorithm-summary/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day29. 尝试理解计算机算法的本质&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://labuladong.online/algo/intro/visualize/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day30. 算法可视化面板助你遨游题海&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
