[{"content":"编程实用软件 Jetbrains全家桶 根据我的经验，用以下两个工具配合食用效果最佳（最稳）\ntoolbox 全家桶激活 非必要软件 HyPlayer 今天偶然发现一个网易云音乐神器，折腾了一下弄出来了，现在只能说部分音乐也可以免费听了。这软件需要两个项目配合使用。\nHyPlayer UnblockNeteaseMusic 这里是教程：关于使用 UnblockNeteaseMusic 的方法\n","date":"2024-06-11T10:12:50+08:00","permalink":"https://paseofyou.github.io/p/%E5%BA%94%E7%94%A8%E6%8E%A8%E8%8D%90%E6%8D%A2%E7%94%B5%E8%84%91%E4%B8%93%E7%94%A8/","title":"应用推荐（换电脑专用）"},{"content":"Java基础 基础\nJava中==和equals有什么区别？（难度：★ 频率：★★★）\nJava中==和equals有什么区别\nString\nString, StringBuffer, StringBuilder区别（难度：★ 频率：★★★）\nJava-String, StringBuffer, StringBuilder的区别\nString对象数目（难度：★★★ 频率：★）\nJava–创建对象的个数及其原理\nintern方法的作用（难度：★★★ 频率：★）\nJava之String系列-intern方法的作用及原理\n如何修改String对象的数据？（难度：★★★ 频率：★★）\nJava-String不可变的含义、原因、好处\nstatic\nstatic的5种用法（难度：★★ 频率：★）\nJava-static-用法/使用位置/实例\n为什么静态方法不能调用非静态方法和变量？（难度：★★★ 频率：★★★）\n与类加载顺序有关，加载静态方法时，非静态的未初始化。见：JVM原理-类加载过程(有实例)\n异常\n异常有哪两大类？Throwable和Exception是什么关系？常见的RuntimeException有哪些？常见的Error有哪些？（难度：★★ 频率：★★★★）\nJava-异常/Exception-类型/原理\ncatch里return了，finally是否执行？（难度：★★ 频率：★）\nJava-异常/Exception-try/catch/finally的return顺序\nIO\n字节流与字符流区别？（难度：★★ 频率：★★）\nJava-IO-字节流与字符流的区别\nBIO, NIO, AIO 区别？（难度：★★★ 频率：★）\nJava-BIO、NIO、AIO-区别/使用/实例\nJDK8\nJDK8新特性（难度：★★ 频率：★★）\n接口允许default和static；lambda；stream；时间新API（LocalDateTime等）CompletableFuture；等\nJDK8接口的default和static（难度：★★ 频率：★）\nJava-接口(JDK8新特性等)-详解/实例\nJDK8 Stream API 流操作包括哪些部分？项目中怎么用的Stream？（难度：★★ 频率：★）\nJava-Stream(流)-使用/实例/流操作\n语法\n项目中对泛型的使用（难度：★★ 频率：★★）\nJava-泛型的应用\n接口与抽象类的区别？（难度：★★ 频率：★）\nJava-接口与抽象类的区别\n反射\nJava反射：forName和classLoader的区别（难度：★★★ 频率：★）\nJava-通过反射实例化对象\n反射机制中可以获取private成员的值吗？（难度：★★★ 频率：★）\n可以。法1：通过Field类提供的set()和get()方法 法2：通过setter和getter 见：Java反射系列-应用 其他\n拆箱与装箱（难度：★ 频率：★）\nJava-自动拆箱/装箱/实例化顺序/缓存\n集合 List\nList与Set的区别（难度：★ 频率：★）\nArrayList与LinkedList以及List与数组、Set的区别\nArrayList与LinkedList异同点？（难度：★ 频率：★★）\nArrayList与LinkedList以及List与数组、Set的区别\nList与数组的区别？（难度：★ 频率：★）\nArrayList与LinkedList以及List与数组、Set的区别\nArrayList是否线程安全？如何线程安全地操作ArrayList？（难度：★★★ 频率：★★★★★）\nJava-ArrayList保证线程安全的方法\nArrayList扩容机制（难度：★★★ 频率：★★★★）\nJava-ArrayList扩容的原理\nList.subList的坑？（难度：★★ 频率：★）\nJava的List之坑-subList与原始List相互影响\nList如何安全删除（难度：★★ 频率：★）\nJava-安全删除的方法\nList如何去重？（难度：★ 频率：★★）\nstream，或：Java-去重的方法\nList如何实现排序（难度：★ 频率：★★）\nstream，或：Java-排序的方法\n为什么引入迭代器？（难度：★★ 频率：★）\nJava类集-为什么引入迭代器\nMap\nHashMap、TreeMap、LinkedHashMap的区别？（难度：★★ 频率：★★★★★）\nHashMap,TreeMap,LinkedHashMap的区别\nJDK8的HashMap的改变？（难度：★★ 频率：★★★★）\nJava-JDK7与JDK8的HashMap的区别\nHashMap数据结构、哈希冲突解决方法（难度：★★★ 频率：★★★★）\nJava-HashMap的底层原理\nhash冲突的4种解决方案\nHashMap扩容的原理（难度：★★★ 频率：★★★★）\nJava-HashMap扩容的原理\nHashMap为什么线程不安全？如何线程安全地操作？（难度：★★★ 频率：★★★★★）\nJava-HashMap保证线程安全的方法\nConcurrentHashMap的原理？JDK8有什么改变？（难度：★★★ 频率：★★★★★）\nJava-ConcurrentHashMap的原理\nHashMap和HashSet的区别及其实现原理？（难度：★★ 频率：★）\nHashMap：将key.hashCode()作为hash值存放，将value直接作为value。 HashSet：调用HashMap的put方法；将key.hashCode()作为hash值存放，将HashSet类的final变量PRESENT作为value。 HashMap如果使用对象最为key，要注意什么？（难度：★★ 频率：★）\n重写hashCode和equals。 对象比较为什么重写hashCode和equals？（难度：★★ 频率：★）\n重写equals方法时需要重写hashCode方法，主要是针对Map、Set等集合类型的使用； a: Map、Set等集合类型存放的对象必须是唯一的； b: 集合类判断两个对象是否相等，是先判断HashCode是否相等，如果HashCode返回TRUE，还要再判断equals返回值是否ture，只有两者都返回ture，才认为该两个对象是相等的。 JVM 运行时数据区\n运行时数据区是怎样的？线程安全（即线程私有）的有哪些？（难度：★★ 频率：★★★★）\nJVM原理-运行时数据区域\n对象实例、类信息、常量、静态变量分别在运行时数据区的哪个位置？（难度：★★ 频率：★★）\nJVM原理-运行时数据区域\n类加载\nJava类加载流程？初始化流程？（难度：★★ 频率：★★★★★）\nJVM原理-类加载过程(有实例)\nJVM双亲委派模型（难度：★★★ 频率：★）\nJVM原理-双亲委派模型\n内存泄露\nJava内存泄露什么时候会发生？（难度：★★ 频率：★★）\nJava-内存泄露的原因及解决方案(大全)\n为什么内部类持有外部类可能内存泄露？如何解决？（难度：★★ 频率：★）\nJava-内部类持有外部类导致内存泄露的原因和解决方案\n为什么ThreadLocal会导致内存泄露？如何解决？（难度：★★★ 频率：★★）\nJava-ThreadLocal导致内存泄露的原因和解决方案\n垃圾回收\nJDK8垃圾回收器的流程？（难度：★★★ 频率：★★★★）\nJVM-内存模型/垃圾回收流程\n引用类型及其含义（难度：★★ 频率：★★★）\nJava引用类型(强引用、软引用、弱引用、虚引用)的区别\nfinalize方法做什么用的？（难度：★ 频率：★）\n垃圾回收时会调用此方法 可以作为GC.Roots的对象有哪些？（难度：★★★ 频率：★）\nJVM-可作为GC Roots的对象\n调用System.gc()会立刻垃圾回收吗？（难度：★★ 频率：★）\nJVM-Java垃圾回收的原理与触发时机\nMinor GC和Full GC的触发时机。（难度：★★★ 频率：★★）\nJVM-Java垃圾回收的原理与触发时机\n频繁Full GC如何排查（难度：★★★★ 频率：★）\nJava线上问题排查-系统问题排查的方法/步骤\nJDK默认的垃圾回收器是什么？（难度：★★ 频率：★）\nJVM-垃圾回收器的详解/对比\nCMS和G1区别（难度：★★★ 频率：★★★）\nJVM-CMS和G1垃圾回收器的区别和执行流程\nCMS与其他老年代垃圾回收器的区别？（难度：★★★ 频率：★）\nJVM-垃圾回收器的详解/对比\nJVM调优\nJVM通常设置哪些参数来调优？（难度：★★ 频率：★★★★）\nJVM调优系列-常用的设置\n其他\n怎么分配堆外内存（难度：★★ 频率：★）\nJava堆外内存–使用/作用\n多线程 综合\n项目中哪些地方用到了多线程？（难度：★★★ 频率：★★★★★）\n定时任务。 比如：定时处理数据进行统计等 异步处理。 比如：发邮件， 记录日志， 发短信等。比如注册成功后发激活邮件 批量处理，缩短响应时间。比如：SpringBoot-多线程处理 线程的安全性问题体现在哪些方面？（难度：★★ 频率：★）\nJava多线程-内存模型(JMM)-详解\n死锁产生的条件？（难度：★★ 频率：★）\nJava多线程-基础知识\ni++是否线程安全？（难度：★ 频率：★）\n不是线程安全的。要线程安全可以用java.util.concurrent.atomic JMM内存结构（难度：★★★ 频率：★★）\nJava多线程-内存模型(JMM)-详解\nsynchronized\nsynchronized用于静态方法与普通方法有区别吗？（难度：★★ 频率：★★）\nJava-synchronized的使用\nsynchronized锁的升级是怎样的？（难度：★★★ 频率：★）\nJava-synchronized之锁的升级\n类库\nSimpleDateFormat线程安全吗？怎么保证线程安全？（难度：★★★ 频率：★★★）\nSimpleDateFormat-线程安全的操作方法(有实例)\n线程池\n线程池缺点（难度：★★ 频率：★★）\nJava-为什么使用线程池？优缺点是什么？\n线程池有哪些参数？（难度：★★ 频率：★★★★★）\nJava线程池-核心参数/大小设置/使用示例\nCPU密集与IO密集的场景如何设置线程池参数？（难度：★★★ 频率：★★★）\nJava线程池-核心参数/大小设置/使用示例\n线程池有哪几种？它们分别对应什么队列？（难度：★★ 频率：★★★）\nJava线程池-种类(Executors的用法)\nJava-阻塞队列(BlockingQueue)的用法(有实例)\n什么时候触发最大线程条件？（难度：★★ 频率：★★★★★）\nJava-线程池的原理(执行流程/状态转换)\n线程池拒绝策略有哪些？默认是哪个？（难度：★★ 频率：★★★★）\nJava线程池-饱和策略(拒绝策略)的使用(有实例)\n线程池里的异常时如何处理的？（难度：★★ 频率：★）\nJava-线程池全局异常处理的方法(有实例)\nJUC\nReentrantLock显著缺点？（难度：★★★ 频率：★★）\nJava-ReentrantLock的用法和原理\nCAS和AQS了解吗？原理是什么（难度：★★★ 频率：★★）\nJava-CAS的原理和优缺点\nJava-AQS的原理\nsynchronized与ReentrantLock区别？（难度：★★ 频率：★★）\nsynchronized与volatile、ReentrantLock的区别\n有哪些原子类？用过哪个？（难度：★★★ 频率：★）\nJava-原子类(atomic)的用法(有实例)\n项目里用了哪些锁？（难度：★★★ 频率：★★★）\n单体项目里用到了ReentrantLock、synchronized； 单例模式里用到了synchronized JDK8新增的异步编程了解吗？（难度：★★★ 频率：★）\nJava异步-CompletableFuture-实例\n多线程顺序交替执行的方法（有三个线程A,B,C，依次打印出A,B,C）（难度：★★★ 频率：★）\n方案1： Java-使用阻塞队列实现顺序消费-方法/实例 方案2：模拟阻塞队列 使用Object的wait(), notify()，使用一个互斥锁。 MySQL 综合问题\nMyISAM与InnoDB区别（难度：★ 频率：★★★★）\nMySQL存储引擎-MyISAM和InnoDB的区别\nsql注入怎么解决？（难度：★★★ 频率：★★）\n数据库-防止SQL注入的方案\n三大范式（难度：★★ 频率：★）\n数据库-三大范式-介绍/使用/实例\n怎么样幂等（难度：★★★ 频率：★★）\n数据库-幂等-方案\n一条SQL查询语句的执行流程（难度：★★ 频率：★★）\nMySQL一条SQL查询语句的执行流程\n为什么不要用外键？（难度：★★★ 频率：★）\n数据库-外键-用法/缺点\n批量往数据库导入1000万条数据方法？（难度：★★ 频率：★）\n存储过程 数据库优化方式（难度：★★★ 频率：★）\n建立索引、字段冗余（减少联表查询）、使用缓存、读写分离、分库分表 怎么调试存储过程（难度：★★ 频率：★）\n使用工具：dbForge Studio for MySQL\nMySQL的三种驱动类型 难度：★★ 频率：★）\nMySQL-时区/连接器/驱动类型\n事务\n隔离级别是怎样的？脏读、幻读是什么意思？（难度：★★★ 频率：★★★★★）\nMySQL隔离级别-未提交读，提交读，可重复读，序列化-详解(有示例)\n隔离级别如何选用？（难度：★★ 频率：★★）\nMySQL隔离级别-未提交读，提交读，可重复读，序列化-详解(有示例)\nACID（难度：★★ 频率：★）\n数据库-事务的ACID-介绍/详解\n隔离级别是如何实现的？（MVCC）（难度：★★★★ 频率：★★）\nMySQL隔离级别的实现方式-MVCC\n快照读与当前读 是怎样的？（难度：★★★★ 频率：★★）\nMySQL隔离级别的实现方式-MVCC\n索引\n索引的种类（难度：★★ 频率：★★★）\nMySQL索引的类型\n数据库使用索引的缺点？（难度：★★ 频率：★★★）\nMySQL-索引的优点/缺点/创建索引的原则\n创建索引的原则（难度：★★ 频率：★★★★）\nMySQL-索引的优点/缺点/创建索引的原则\n索引什么时候会失效（难度：★★ 频率：★★★★★）\nMySQL-索引失效的原因/解决方案\n创建了A, B, C联合索引，使用B,C能否索引（难度：★★★ 频率：★★★★★）\nMySQL联合索引-使用/原理/优化\nLIKE什么时候走索引，什么时候不走索引？（难度：★★★ 频率：★★★）\nMySQL索引的优化-LIKE模糊查询\nORDER BY是否走索引？（难度：★★★ 频率：★★）\nMySQL索引的优化-ORDER BY\n聚集索引是什么？什么是回表？（难度：★★★★ 频率：★★★★）\nMySQL-聚集索引/辅助索引/回表查询/覆盖索引(原理及优化)\n大表分页的优化方法？（难度：★★★★ 频率：★）\nMySQL-大数据量的分页优化方案\n索引原理；为什么采用B+树？（难度：★★★★ 频率：★）\nMySQL原理-索引的原理\n锁\n共享锁与独占锁的区别？（难度：★★ 频率：★）\nMySQL-行级锁与表级锁\n什么时候会死锁？（难度：★★★★ 频率：★）\nMySQL-死锁的原因及解决方法\n分库分表\n什么时候考虑分库分表？分库分表要考虑什么问题？（难度：★★★ 频率：★）\n数据库-分库分表-方案/切分方式/注意的问题\n原来没分库分表，后期如何分库分表？（难度：★★★★ 频率：★★）\n数据库-单表转分库分表\n分库分表的中间件（难度：★★ 频率：★★）\nSharding-JDBC、Mycat 水平分表，有哪些规则？（难度：★★★ 频率：★★★★★）\n数据库-分库分表-垂直分表与水平分表\n如何维护全局的id（难度：★★★ 频率：★★★★★）\n分布式-生成数据库全局唯一ID的方案\n语句\n语句类笔试题（难度：★★★ 频率：★）\nMySQL-常见业务/笔试题\nOR与IN的效率？（难度：★★★ 频率：★）\nMySQL-SQL语句优化-大全\n内联结，全（外）联结，左联结，右联结，的含义？（难度：★★ 频率：★）\nMySQL-内联结/全联结/左联结/右联结的区别\nRedis 基本问题\nRedis数据类型及其使用场景（难度：★★★ 频率：★★★★★）\nRedis-数据类型及其使用场景\nRedis的数据类型对应的底层结构是怎样的？（难度：★★★★ 频率：★★★）\nRedis原理-数据类型的底层结构\nRedis为什么很快？（难度：★★ 频率：★★★★★）\nRedis原理-为什么性能高，速度快？\nRedis是单线程为什么速度依然快？（难度：★★ 频率：★★）\nRedis原理-为什么性能高，速度快？\nRedis持久化AOF，RDB区别（难度：★★ 频率：★★★★）\nRedis持久化-AOF和RDB的区别\n持久化：长久下来AOF文件会很大怎么办？（难度：★★★ 频率：★★）\n使用重写机制。见：Redis-重写机制（减小AOF文件大小）\nRedis有哪些原子命令？（难度：★★★ 频率：★）\nRedis所有单个命令都是原子性的。 穿透、无底洞、雪崩、击穿 解决方案？（难度：★★★ 频率：★★★★★）\nRedis-缓存穿透-含义/原因/解决方案 Redis-无底洞-含义/原因/解决方案 Redis-缓存雪崩-含义/原因/解决方案 Redis-缓存击穿-含义/原因/解决方案 Redis的发布订阅机制及其使用场景（难度：★★★★ 频率：★★）\nRedis-发布订阅-原理/使用场景\n内存回收机制是怎样的？（或者说：淘汰策略）（难度：★★★ 频率：★★★★）\nRedis–内存回收原理（淘汰策略）\n给一个key怎么知道是用的哪种数据类型？（难度：★ 频率：★）\n用type命令。例如：type key1 为什么使用Redis，不用Memcache和MongoDB？（难度：★★ 频率：★★）\nRedis，Memcache，MongoDB三者的区别\nRedis与数据库如何同步？各个方式的缺点是什么？（难度：★★★ 频率：★★★）\nRedis-保证缓存与数据库的一致性-解决方案\nRedis很慢，如何排查及解决？（难度：★★★★ 频率：★★）\nRedis-变慢原因及排查方法\n多线程操作同一个Key如何保证一致性？（微服务部署多个实例时如何保证一致性？）（难度：★★★★ 频率：★）\nRedis-多线程竞争同一key-解决方案\n秒杀的时候怎么使用Redis？（难度：★★★★ 频率：★★★）\nRedis-秒杀的解决方案\n布隆过滤器原理？什么时候会误判？（难度：★★★★ 频率：★★★）\nRedis-布隆过滤器-使用/原理/实例\n用Redis如何实现延迟队列？（难度：★★★★ 频率：★）\nRedis高级-延迟队列\n分布式锁\nRedis做分布式锁如何处理超时时间？比如：超时时间是5秒，但要执行20秒，相当于没锁住；超时时间是20秒，但只需执行5秒（浪费）（难度：★★★★ 频率：★★★）\n设置中等长度的时间，线程执行完删除这个值；另起线程，定期去刷新这个值。Redisson的分布式锁就是这个方案，见：Redisson-分布式锁的原理 Redis实现分布式锁，集群环境如何处理主节点宕机这种情况？（难度：★★★★★ 频率：★）\n使用RedLock红锁算法：若过半的Redis节点能够加锁成功则表示获取锁成功，类似于zk实现分布式锁方式。见：Redisson-红锁(Redlock)-使用/原理 集群\n多节点有哪些部署方式？（难度：★★ 频率：★）\n主从、哨兵、集群（Cluster） 集群不支持事务，如何解决？（难度：★★★★ 频率：★）\nRedis集群-使用/注意事项\n主从集群中主节点死了以后，是否还能使用？如何解决？（难度：★★★ 频率：★）\n可以使用哨兵部署，自动故障转移。 读写分离时读写分别在哪个节点（难度：★★ 频率：★）\n在主节点上写，在从节点上读。 集群（Cluster）\n集群（Cluster）的数据是怎样分布的？（难度：★★★★ 频率：★）\nRedis集群-数据分布\n集群（Cluster）如何进行节点通信？（难度：★★★★ 频率：★★）\nRedis集群-节点通信的过程(原理)\n集群（Cluster）如何进行扩展（伸缩）？（难度：★★★ 频率：★★）\nRedis集群-伸缩的过程(原理)\n集群（Cluster）如何进行故障转移？（难度：★★★★ 频率：★★）\nRedis集群-故障转移的过程(原理)\n设计模式 项目里用到了哪些设计模式，怎么用的？（难度：★★★ 频率：★★★★★）\nJava设计模式-在项目中的应用\n设计模式的原则（难度：★★ 频率：★）\n这个我老是记不住，我用这个口诀：单开里依接合迪。对应每个原则的第一个字。 见：Java设计模式-原则 设计模式的类别（难度：★★ 频率：★）\nJava设计模式-分类及功能\n单例模式的写法？（难度：★★ 频率：★★★★）\nJava设计模式-单例模式(6种写法)\n手写双重检验单例（为什么用volatile，为什么两次if判断）（难度：★★★ 频率：★★★）\nJava设计模式-单例模式(6种写法)\n静态代理与动态代理区别？（难度：★★★ 频率：★★★★★）\nJava-代理模式(静态代理与动态代理)的使用\n框架 Spring IOC\nSpring循环依赖解决方法及原理（难度：★★★★ 频率：★★★★）\nSpring-循环依赖的解决方案-实例 Spring循环依赖的原理(三)-原理概述 Spring的循环依赖用的是三级缓存，为什么不是两级？（难度：★★★★ 频率：★★）\nSpring循环依赖的原理(四)-为什么用三级缓存，而不是二级 FactoryBean和BeanFactory区别（难度：★★★★ 频率：★★）\nSpring-BeanFactory-使用/原理/详解 Spring-FactoryBean-使用/原理/详解 BeanFactory和ApplicationContext区别？（难度：★★★★ 频率：★）\nSpring-ApplicationContext-使用/教程/原理\nbean的生命周期是怎样的（难度：★★★ 频率：★）\nSpring-Bean生命周期-流程/原理\nSpring几种scope区别（难度：★★★ 频率：★）\nSpring-Bean的作用域(scope)-使用/详解\nSpring容器的生命周期是怎样的？（难度：★★★ 频率：★）\nSpring容器生命周期-Lifecycle\nAOP\nAOP有哪几种通知，如果方法执行报异常，哪个通知不会执行？（难度：★★★★ 频率：★）\n前置，后置，环绕，返回，异常。若报异常，返回不会执行。见：这里 SpringAOP的使用场景是什么？用AOP开发过什么功能（难度：★★★ 频率：★★★）\nSpring之AOP系列-使用场景/原理\nAOP原理？（难度：★★★★ 频率：★★★★★）\nSpring之AOP的原理(一)-概述\n事务\nSpring默认数据里隔离级别是什么？项目里用的哪个？（难度：★★★ 频率：★★）\n默认采用数据库的隔离级别。项目里就是用的默认的。见：MySQL隔离级别-未提交读，提交读，可重复读，序列化-详解(有示例)\nSpring事务什么时候会失效？如何解决？（难度：★★★★ 频率：★★★★）\nSpring事务失效-原因/解决方案\nSpring事务传播机制？（难度：★★★★ 频率：★★）\nSpring事务传播机制详解\n其他\nSpringBoot如何热更新配置？（更新配置后无需重启服务）（难度：★★★ 频率：★）\n有四种方案。详见：这里\nSpringBoot自动配置原理？（难度：★★★★★ 频率：★）\nSpringBoot原理-自动配置\nSpringMVC SpringMVC流程（难度：★★★★ 频率：★★★）\nSpringMVC的请求流程\nservlet的过滤器、拦截器、AOP的执行顺序 （难度：★★★ 频率：★★）\nSpringBoot-过滤器/拦截器/AOP-用法\nSpringBoot SpringBoot的启动流程？（难度：★★★★ 频率：★★★★）\nSpringBoot原理-启动流程\nSpringBoot的动态代理默认用的哪个（cglib还是JDK）？（难度：★★★★ 频率：★★★★）\nSpringBoot 1.5.x：默认使用JDK代理；SpringBoot 2.x：默认使用CGLIB代理。见：Spring之AOP系列-使用场景/原理\n怎么自己写SpringBootStarter（难度：★★★★ 频率：★）\nSpringBoot-自定义Spring Boot Starter\nMyBatis MyBatis的#与$有什么区别？（难度：★★ 频率：★★★★）\nMyBatis-#与$的区别\nMyBatis的原理？（Mapper是个接口，它的实现类在哪？）（难度：★★★★ 频率：★★）\nSpring-MyBatis源码对FactoryBean的应用\n为什么MyBatis与Spring整合二级缓存会失效 ？（难度：★★★★ 频率：★）\nMyBatis原理-缓存机制\n中间件 MQ 综合\nRabbitMQ，RocketMQ和Kafka区别（难度：★★ 频率：★★★★★）\nRabbitMQ，RocketMQ，Kafka的区别\nRabbitMQ\nRabbitMQ有哪些交换器？RabbitMQ的交换器与队列的关系？（难度：★★ 频率：★★★）\nRabbitMQ的交换器类型与队列模式\nRabbitMQ的消息异常（丢失、重复、顺序、堆积）如何处理？（难度：★★★ 频率：★★★★★）\nRabbitMQ消息丢失的原因与解决方案 RabbitMQ消息重复的原因与解决方案 RabbitMQ保证消息顺序的方案 RabbitMQ消息堆积的解决方案 RabbitMQ消息是否会过期？（难度：★★★ 频率：★★）\n默认不会过期。可以设置过期时间。 详见：RabbitMQ消息的过期时间(TTL)-使用/原理 RabbitMQ的消息什么时候会放到死信队列？（难度：★★★ 频率：★）\nRabbitMQ死信队列-使用/原理\nRabbitMQ的延迟队列是怎样的？（难度：★★★ 频率：★★）\nRabbitMQ延迟队列-使用/原理\nRabbitMQ的集群有哪几种部署方式？（难度：★★ 频率：★）\n多机多节点，单机多节点 Kafka\n为什么Kafka性能很高（难度：★★★ 频率：★★★）\nKafka为什么吞吐量大、速度快？\nKafka的消息异常（丢失、重复）如何处理？（难度：★★★ 频率：★★★★）\nKafka消息丢失-原因/解决方案/零丢失的配置 Kafka消息重复-原因/解决方案 Kafka不支持延迟队列，如果用到延迟队列，该如何实现？（难度：★★★★★ 频率：★★★）\nKafka延迟队列的实现方式\nShiro Shiro怎么根据url对应权限，流程是什么？（难度：★★★ 频率：★★★）\nShiro整合jwt-通过url控制权限\nsession存放在哪里？（难度：★★ 频率：★）\n一般放在Redis。见：Shiro整合shiro-redis\n分布式 综合 分布式\nCAP理论是什么？Zookeeper和Eureka分别放弃了什么？（难度：★★★ 频率：★★★）\n分布式-CAP定理 注册中心-Eureka、Zookeeper、Nacos、Consul的区别 分布式锁实现方式（难度：★★★ 频率：★★★★★）\n分布式锁的实现方案\n2PC、3PC、TCC的区别及使用场景？（难度：★★★★ 频率：★★）\n分布式事务-理论\n分布式session共享解决方案（难度：★★★ 频率：★★）\n分布式Session的实现方案\n为什么微服务一定要有网关？（难度：★★★ 频率：★）\n微服务为什么要有网关\n配置中心\n如何把微服务的公共配置给拿出来？（难度：★★ 频率：★）\n用spring.profiles.include，将公共的配置包含进去。 使用Nacos，Nacos支持公共配置 Nacos\nNacos如何续期？（难度：★★★ 频率：★★）\n这个地方我没看，回答的Eureka的： 见：Spring Cloud Eureka原理-续期/自我保护 Nacos支持AP还是CP？（难度：★★★ 频率：★★）\n两者都支持，选一种即可。（默认是AP） Zookeeper\nZookeeper注册中心挂了，服务还能否调用？（难度：★★★ 频率：★★）\n可以，因为客户端还有缓存。 ZK分布式锁，leader节点宕机了，会发生什么？（难度：★★★★ 频率：★）\n进行选举（过半选举） RPC\nRPC框架有哪些？SpringCloud是否是RPC框架？（难度：★★ 频率：★）\nDubbo（阿里的）、gRPC（谷歌的），RMI（JAVA自带）、Thrift（Apache的） SpringCloud不是rpc框架，它是分布式一整套解决方案，它的feign组件是rpc框架。 SpringCloud与Dubbo的区别？（难度：★★ 频率：★）\nDubbo与SpringCloud区别\nHTTP与RPC方式的区别？（难度：★★★ 频率：★）\n分布式-RPC\nSpringCloud 主要是：服务注册、负载均衡、限流、降级、熔断。首先要看其原理。\n服务注册（Eureka）\nEureka都挂了，服务还能否调用？（难度：★★★ 频率：★★）\n可以，因为客户端还有缓存。见：Eureka服务端挂了，为什么微服务还能调通？(原理分析) 微服务关闭了，但请求还会进来，如何解决？（难度：★★★ 频率：★）\nSpring Cloud Eureka-关闭微服务后请求还会进来\n如何续期？如何自我保护？（难度：★★★ 频率：★★）\nSpring Cloud Eureka原理-续期/自我保护\n熔断（Hystrix）（难度：★★★★★ 频率：★）\nSpring Cloud-hystrix熔断的原理\n负载均衡（Ribbon）（难度：★★★★★ 频率：★）\nSpring Cloud Ribbon-负载均衡的原理\nSpringCloud限流用哪些组件？（难度：★★★ 频率：★）\nsentinal、hystrix 配置中心\n配置中心的配置修改后，服务不重启可以获得最新配置吗？（难度：★★ 频率：★）\n可以的。有四种方案，见：这里 降级\nELK 正排索引与倒排索引的区别？（难度：★★★ 频率：★）\nES-正排索引与倒排索引\nES如何与数据库（如MySQL）同步数据？（难度：★★★ 频率：★★★）\nES-与MySQL同步\nES集群的健康状态，绿色、黄色、红色分别什么含义？（难度：★★★ 频率：★★★）\nES-排查集群健康状态是Red、Yellow的问题\nES写入数据的流程（难度：★★★★★ 频率：★★★）\nES-写入数据的流程(原理)\nES查询数据的流程（难度：★★★★★ 频率：★★）\nES-查询数据的流程(原理)\n综合 有没有遇到过什么比较复杂的问题，如何排查的？（难度：★★★★ 频率：★★★★★）\nJava后端接口响应慢的排查方法及解决方案\n阅读过哪些源码？（难度：★★★★ 频率：★★★★）\nSpring循环依赖的原理。见：此文 MyBatis的原理。见：此文 Hystrix的原理。见：此文 feign负载均衡的原理。见：此文 OOM如何排查？（难度：★★★ 频率：★★）\n使用jprofiler，查看OOM时的堆输出。 Java进程消失，如何排查？（难度：★★★ 频率：★）\nJava进程突然消失的原因与排查方案\n一个微服务起了多个实例，怎么让定时任务只在一个实例上执行？（难度：★★★ 频率：★）\n用定时任务中间件。常用的有：XXL-JOB、PowerJob、quartz 如何处理SpringMVC中的异常？ （难度：★★ 频率：★★★）\n用全局异常处理：@ControllerAdvice + @ExceptionHandler。 从用户请求到数据返回的整个流程（难度：★★ 频率：★★★）\n用户请求到出现页面流程\nIaaS，PaaS和SaaS是什么？（难度：★★ 频率：★）\nIaaS,Paas,SaaS,DaaS-区别\n网站常见的安全漏洞有哪些？（难度：★★★ 频率：★）\n网站安全漏洞-大全\noauth2是干什么用的，流程是怎样的？（难度：★★★★★ 频率：★★）\nOAuth2-流程/原理\n如何不停机更新服务？（难度：★★★★ 频率：★）\nSpringBoot项目-如何不停服更新应用？\n限流算法有哪些？（难度：★★★★★ 频率：★★★）\n常见的限流算法的原理以及优缺点\n杂项 HTTP\nHTTPS的详细流程（难度：★★★★ 频率：★★）\nHTTPS-流程/原理\nHTTP消息结构（难度：★★ 频率：★）\nHTTP-报文结构\nHTTP状态码及其含义（难度：★★ 频率：★★）\n简记：正完重客服。（1xx：正在处理请求；2xx：请求处理完毕（成功）；3xx：重定向（需要附加操作）；4xx：客户端错误（导致服务器无法处理请求）， 5xx：服务器错误（服务器处理请求出错））。详见：此文\nWebCocket，HTTP，Socket区别与联系？（难度：★★ 频率：★）\nHttp，Socket，Websocket-区别\nHTTP1.0和HTTP2.0的区别？（难度：★★ 频率：★）\nHTTP1.1与HTTP2.0区别\nLinux\nLinux的5种IO模型（难度：★★★★ 频率：★）\nLinux五种IO模型-原理/区别/详解\n数据结构与算法\n常见排序算法的复杂度及稳定性（难度：★★★ 频率：★★）\n排序算法-Java实例/原理\n常见查找算法的复杂度及稳定性（难度：★★★ 频率：★★）\n查找算法-Java实例/原理\n网络\n网络的5层协议的体系结构（难度：★ 频率：★★★）\n计算机网络-体系结构(五层模型/七层模型)\nTCP握手与挥手流程？为什么要三次？四次？（难度：★★★ 频率：★★）\nTCP-三次握手和四次挥手\nTCP如何保证可靠传输？（难度：★★★ 频率：★）\nTCP协议如何保证可靠传输\n服务器怎么主动向客户端主动推送？（难度：★★ 频率：★）\n客户端去轮询（每秒查询一次）；WebSocket；TCP长连接；UDP内网穿透 DNS劫持是怎样的？（难度：★★★ 频率：★）\n攻击DNS服务器或者客户端设备，修改域名对应的IP，导致通过域名访问到假IP，从而破坏原有服务。 Linux无法通过curl获得服务器主页数据如何排查？（难度：★★ 频率：★）\n关防火墙、看host文件里边是否ip和域名绑定了 两个同网段Linux服务器在不安装客户端情况下如何传递文件？（难度：★ 频率：★）\nscp命令 Linux命令\n查看文本文件头部n行。（难度：★ 频率：★）\nhead -n 200 filename //200可替换为任一数字 查看文本文件末尾n行。（难度：★ 频率：★）\ntail -n 200 filename //200可替换为任一数字 查看文本文件行数。（难度：★ 频率：★）\nwc -l filename Netty\nNetty 是如何解决 TCP的拆包/粘包问题的？（难度：★★★ 频率：★）\nNetty-原理-TCP-粘包与拆包\n编程题（难度：★★★ 频率：★★）\nJava笔试题编程题大全(有详细答案)\n大数据\n大数据量如何统计重复出现的次数？（难度：★★★★★ 频率：★）\n大数据处理方案\n怎么实时统计订单？（难度：★★★★★ 频率：★）\n使用Storm框架。 要统计10分钟内订单的亏损，你会怎么设计？（难度：★★★★★ 频率：★）\n使用Storm的窗口模式 ","date":"2024-06-06T11:12:50+08:00","permalink":"https://paseofyou.github.io/p/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E8%BD%AC%E8%BD%BD%E8%87%AA%E5%AD%A6%E7%B2%BE%E7%81%B5/","title":"Java基础面试题（转载自学精灵）"},{"content":" 原本搭建了hexo和hugo的，发现我还是喜欢美观和性能取中间值，就有了现在这个blog\n环境准备 1、下载hugo的exe： https://github.com/gohugoio/hugo/releases/latest\n官方推荐选择扩展的版本。\n将exe放到电脑本地上，推荐D:/software/hugo/bin。并配好cmd的系统环境变量。\n2、下载git，并链接好自己的github账号，直到能上传项目到号上为止（自行摸索）\n3、notepad++、vscode、typora\n开始搭建 先说思路，我一开始是对其他博客教程中的 github 分支里， main 做主分支，page 做文章发布页是持怀疑态度的，最后经过我10多小时的踩坑时间，发现这样做居然是最省力的，最高效的。所以我也准备这样做。\n当然我很乐意分享我的博客源码，如果对分享比较敏感的小伙伴，可以创建两个仓库，一个用作博客源代码仓库，一个做文章发布仓库，用 github ci 来对两个仓库进行连接和推送也是可以的。可以根据我最后提供的 ci 代码进行更改也是能实现的。\n1、在自己的github上新建项目，取名为\u0026lt;你的github名字\u0026gt;.github.io，将克隆链接复制下来备用。\n2、首先在本地选好项目位置，新建文件夹后，在这个位置打开cmd\n1 2 3 git clone \u0026lt;你刚刚复制的链接\u0026gt; cd \u0026lt;克隆的项目\u0026gt; hugo new site \u0026lt;博客名字\u0026gt; archetypes：存放用 hugo 命令新建的 Markdown 文件应用的 front matter 模版 content：存放内容页面，比如「博客」、「读书笔记」等 layouts：存放定义网站的样式，写在layouts文件下的样式会覆盖安装的主题中的 layouts文件同名的样式 static：存放所有静态文件，如图片 data：存放创建站点时 Hugo 使用的其他数据 public：存放 Hugo 生成的静态网页 themes：存放主题文件 config.toml：网站配置文件 3、安装喜欢的hugo主题，在以下链接中选择一个主题。\nhttps://themes.gohugo.io/\n推荐使用以下命令进行安装。\n1 git submodule add \u0026lt;主题克隆地址\u0026gt; themes/\u0026lt;主题名称\u0026gt; 此时theme文件夹里就有了刚刚下载的主题。\n注意：不要在这个文件夹内修改，因为主题一旦更新就会被覆盖你做的主题修改。如果需要更改主题部分，可以把主题的内容复制到根目录对应的文件，即可随便修改。\n4、主题中有许多预定义的格式设置，可以把它复制到theme文件夹同级的其他文件中。比如主题的content可以复制到自己网站的content。**不要傻瓜式的一次性复制过来，会报错！**一点一点的复制过来，复制一下，用下面代码运行一下。运行不了的不要复制过来，删掉复制过来的报错内容，没必要去修。\n注意：你每次做更改，需要按下ctrl+c后重新运行才会生效。\n1 hugo server 5、把主题的hugo.yaml (也可能是其他的文件)，复制到根目录，按你自己的喜好来更改就行。\n有空了再慢慢配置修改，我们进行下一步。\n网站写作 这个比较根据主题的内容来配置。建议把theme的content里，依葫芦画瓢。里面是什么配置就怎么去做。这里说点通用的。\nHugo 允许在文章内容前面添加 yaml, toml 或者 json 格式的前置参数。（就是你的typora最上方灰色那部分配置）\ntitle: 文章标题.\nsubtitle: 文章副标题.\ntags: 文章标签.\ncategories：文章分类.\ndate: 这篇文章创建的日期时间。它通常是从文章的前置参数中的 date 字段获取的，但是也可以在网站配置中设置.\nlastmod: 上次修改内容的日期时间.\ndraft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数，这篇文章不会被渲染.\nauthor: 文章作者.\nauthorLink: 文章作者的链接.\ndescription: 文章内容的描述.\nlicense: 这篇文章特殊的许可.\ntags: 文章的标签.\ncategories: 文章所属的类别.\nhiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上，但是此行为可以在网站配置中设置的.\nfeaturedImage: 文章的特色图片.\nfeaturedImagePreview: 用在主页预览的文章特色图片.\ntoc: 如果设为 true, 这篇文章会显示右侧目录.\nautoCollapseToc: 如果设为 true, 文章目录会自动折叠.\nmath: 如果设为 true, 将自动渲染文章中的数学公式.\nmapbox: 和网站配置中的 params.mapbox 对象相同.\nlightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现.\nlinkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接.\nshare: 和网站配置中的 params.share 对象相同.\ncomment: 如果设为 true, 将启用评论系统.\n其他的可以自行摸索，上面这些配置就够用了，大多数可以当字典用，现用现查。\n另外，文章都放在 content 的 post 文件夹中，如果没有这个 post 文件夹需要自己手动创建。\n在 post 里面写 markdown 格式文本才能看到（这是个坑，如果不这样就不会显示）。一般 theme 文件夹的 exampleSite 里都有示例的，依葫芦画瓢就行。\n不建议用hugo的命令生成默认初始文章，推荐复制以前写的文章自行修改即可。\ngithub部署 首先在根目录创建文件 .gitignore ，里面填写 /public/ 即可，用于忽略多余文件加快推送速度。\n环境准备：\n在github 上配置 action secrets 密钥 PERSONAL_TOKEN ，这个可以在用户界面 Settings/Developer Settings ，选择Personal access tokens ，经典token，然后添加密钥。 密钥权限选择仓库所有权限和 workflow 权限。复制好令牌密钥备用。 返回到博客项目，在项目的设置找到 Secrets and variables，里面的 action secrets 中，设置 secrets： PERSONAL_TOKEN，密码为上面的令牌密钥。 在项目设置中找到rules，新建分支rule ，记得启用，把当前分支允许操作别的分支权限给打开。 在项目设置的 page 中，将 source 改为 github actions 即可 部署环节：\n我这里研究了一下 github ci，你可以根据我的github ci 配置来自行修改。\n学有余力的同学可以自行了解ci知识点，我也不太会，但配置出来能用就行。\n这个 github ci 是个大坑。\n它的根目录是基于内置的ubuntu来的，而不是仓库根目录，不要混淆！ hugo 命令确实生成了 public 文件夹，但存放在内置的ubuntu 内，而不是直接生成在仓库内！ 一定要一点一点的去调试，不要一步到位！ 只要是操作其他分支的操作，都需要令牌，令牌权限以及分支权限 checkout是检出代码，意思是从 github 仓库拉出代码，而不是 git 的切换分支！ 即创建 .github\\workflows\\deploy.yml，里面写以下内容。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 name: deploy on: push: branches: [\u0026#34;main\u0026#34;] workflow_dispatch: schedule: - cron: \u0026#34;0 0 * * *\u0026#34; permissions: contents: read pages: write id-token: write jobs: manual_push: runs-on: ubuntu-latest steps: - name: checkout uses: actions/checkout@v4 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build Web run: hugo - name: push Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: paseofyou/paseofyou.github.io PUBLISH_BRANCH: page PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} auto_update: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: manual_push steps: - name: Checkout uses: actions/checkout@v4 with: ref: page - name: Setup Pages uses: actions/configure-pages@v5 - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./ - name: Deploy to GitHub Pages uses: actions/deploy-pages@v4 现在为止，部署环境完成。现在每次推送文章都会自行构建网站，免去了每次写作后很多很多部署的麻烦。\n把这个推送上去就会自动部署。\n写好文章后，直接运行以下命令，把代码推上去即可。\n1 2 3 4 git pull git add . git commit -m \u0026#34;\u0026lt;备注你想要的提交信息\u0026gt;\u0026#34; git push origin main 如果 git 有问题，可以根据以下命令来修复。\n1 2 3 4 5 6 7 8 9 10 11 # 以下内容是 git 配置，不用随便使用以下命令。 # 配置 git push 默认分支，之后就能用 git push 推送就行，不用 git push -u origin main git push --set-upstream origin main # 如果你是新建的本地仓库，虽然和github的名字一模一样，但上传总会报错。用下面这个命令来合并即可。 git pull origin main --allow-unrelated-histories # git 查看远程分支 git remote -v # git 添加分支，其中 origin 是本地分支名称 git remote add origin https://github.com/paseofyou/paseofyou.github.io.git # git 删除远程分支 git remote remove origin 有问题欢迎在评论区问我。（这部分挺难的）\n评论系统 建议跟着官方教程走。\n我这里选择的方案是：\ntwikoo mongoDB Atlas 的 AWS / Oregon (us-west-2) Hugging Face 部署 本文引用 本文参考了许多博客，并对字典部分进行了摘抄，方便自己回看和帮助别人搭建，由衷感谢。\n网站搭建部分：文章1 ;\n网站写作部分：文章1 ;\n以及没有提到的博客，在此统一感谢\n","date":"2024-06-04T10:12:50+08:00","permalink":"https://paseofyou.github.io/p/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"hugo博客搭建"}]